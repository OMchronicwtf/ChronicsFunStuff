local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Camera = game.Workspace.CurrentCamera
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local mouse = player:GetMouse()

local targetPart = nil
local lockOnHeld = false
local aimbotEnabled = false
local autoLockEnabled = false
local lockOnKey = Enum.UserInputType.MouseButton2 -- Default keybind for locking on (right mouse button)
local lockOnRadius = 20 -- Lock-on radius
local fovAngle = 60 -- Field of View angle in degrees
local visualizerEnabled = false -- Start with visualizer off
local horizontalOffset = 0 -- Initial horizontal offset
local verticalOffset = -19 -- Initial vertical offset
local espEnabled = false
local espColor = Color3.fromRGB(255, 0, 0) -- Default ESP color

-- FOV Visualizer Setup
local fovVisualizer = Instance.new("ScreenGui")
fovVisualizer.Name = "FOVVisualizer"
fovVisualizer.Parent = player.PlayerGui
fovVisualizer.Enabled = visualizerEnabled -- Control visibility with this property

local fovFrame = Instance.new("Frame")
fovFrame.Name = "FOVFrame"
fovFrame.BackgroundColor3 = espColor
fovFrame.BackgroundTransparency = 0.5
fovFrame.AnchorPoint = Vector2.new(0.5, 0.5)
fovFrame.Position = UDim2.new(0.5 + (horizontalOffset / Camera.ViewportSize.X), 0, 0.5 + (verticalOffset / Camera.ViewportSize.Y), 0)
fovFrame.Parent = fovVisualizer

local fovCorner = Instance.new("UICorner")
fovCorner.CornerRadius = UDim.new(0.5, 0) -- Makes the frame circular
fovCorner.Parent = fovFrame

local function updateFOVVisualizer()
    if not visualizerEnabled then
        fovVisualizer.Enabled = false
        return
    end

    fovVisualizer.Enabled = true
    local viewportSize = Camera.ViewportSize
    local fovRadius = math.tan(math.rad(fovAngle / 2)) * viewportSize.Magnitude / 2

    -- Adjust the scaling factor to make the visualizer size more accurate
    local diameter = math.max(fovRadius * 2 / (viewportSize.Magnitude / 765), 5) -- Adjusted minimum size
    fovFrame.Size = UDim2.new(0, diameter, 0, diameter)
    fovFrame.Position = UDim2.new(0.5 + (horizontalOffset / Camera.ViewportSize.X), 0, 0.5 + (verticalOffset / Camera.ViewportSize.Y), 0)
end

local function getAngleBetween(vector1, vector2)
    return math.acos(math.clamp(vector1:Dot(vector2), -1, 1)) * (180 / math.pi)
end

local function getPrioritizedTarget()
    local nearestPart = nil
    local closestDistance = math.huge
    local playerPosition = player.Character and player.Character.PrimaryPart.Position or Vector3.new()
    local cameraCFrame = Camera.CFrame
    local cameraLookVector = cameraCFrame.LookVector

    local players = Players:GetPlayers()
    for _, otherPlayer in pairs(players) do
        if otherPlayer ~= player and otherPlayer.Character then
            local humanoid = otherPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Health > 0 then
                local part = otherPlayer.Character:FindFirstChild("Head")
                if part then
                    local distance = (part.Position - playerPosition).magnitude
                    local screenPosition, isOnScreen = Camera:WorldToViewportPoint(part.Position)
                    if isOnScreen and distance < lockOnRadius then
                        local partVector = (part.Position - cameraCFrame.Position).unit
                        local angle = getAngleBetween(cameraLookVector, partVector)
                        if angle < fovAngle / 2 then
                            -- Prioritize by distance and health
                            if distance < closestDistance then
                                closestDistance = distance
                                nearestPart = part
                            elseif distance == closestDistance and humanoid.Health < (nearestPart.Parent:FindFirstChildOfClass("Humanoid") or {Health = math.huge}).Health then
                                nearestPart = part
                            end
                        end
                    end
                end
            end
        end
    end
    return nearestPart
end

local function lockOnTarget(target)
    local tween = TweenService:Create(Camera, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(Camera.CFrame.Position, target.Position)})
    tween:Play()
end

local function updateAimbot()
    if aimbotEnabled then
        if autoLockEnabled then
            local target = getPrioritizedTarget()
            if target then
                lockOnTarget(target)
            end
        end
        -- Manual lock-on logic
        if lockOnHeld then
            local target = getPrioritizedTarget()
            if target then
                lockOnTarget(target)
            end
        end
    end
end

-- ESP Script
local function createESPForPlayer(player)
    if not player.Character or not player.Character:FindFirstChild("Head") then return end
    
    local highlight = Instance.new("Highlight")
    highlight.Adornee = player.Character
    highlight.Parent = player.Character
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.FillColor = espColor
    highlight.FillTransparency = 0.5
    highlight.OutlineColor = Color3.fromRGB(255, 0, 0) -- Red color
    highlight.OutlineTransparency = 0
end

local function updateESP()
    if not espEnabled then
        -- Remove all ESP highlights
        for _, v in pairs(Workspace:GetDescendants()) do
            if v:IsA("Highlight") then
                v:Destroy()
            end
        end
        return
    end
    
    -- Apply ESP to all players
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("Head") then
            createESPForPlayer(player)
        end
    end
end

-- Remove ESP highlight when player dies
local function onCharacterRemoving(character)
    for _, v in pairs(Workspace:GetDescendants()) do
        if v:IsA("Highlight") and v.Adornee and v.Adornee.Parent == character then
            v:Destroy()
        end
    end
end

-- Handle new players joining
local function onPlayerAdded(player)
    if espEnabled then
        if player.Character then
            createESPForPlayer(player)
        end
        player.CharacterAdded:Connect(function(character)
            createESPForPlayer(player)
        end)
        player.CharacterRemoving:Connect(onCharacterRemoving)
    end
end

-- Listen for player added/removed events
Players.PlayerAdded:Connect(onPlayerAdded)

Players.PlayerRemoving:Connect(function(player)
    onCharacterRemoving(player.Character)
end)

local function toggleESP()
    espEnabled = not espEnabled
    updateESP()
end

UserInputService.InputBegan:Connect(function(input, processed)
    if not processed and input.KeyCode == espToggleKey then
        toggleESP()
    end
end)

-- Orion GUI Setup with Configs
local Window = OrionLib:MakeWindow({
    Name = "Chronic's Simple Aimbot",
    HidePremium = false,
    SaveConfig = true,    -- Enables saving configuration
    ConfigFolder = "AimbotConfig" -- Folder name for saving configs
})

-- Home Tab
local homeTab = Window:MakeTab({
    Name = "Home",
    Icon = "rbxassetid://4483345998", -- Example icon, adjust as needed
    PremiumOnly = false
})

homeTab:AddLabel("Changelogs")

homeTab:AddParagraph("Recent Changes", "Version 1.2:\n- Increased Lock-On Radius to 500 studs.")

homeTab:AddParagraph("Version 1.1", "- Excluded the player's own character from ESP.\n- Enhanced ESP updates so all newly joined players will be tracked.")

homeTab:AddParagraph("Version 1.0", "- Aimbot feature with toggle and auto-lock.\n- Adjustable lock-on radius.\n- Configurable FOV angle.\n- Visualizer to show the FOV area on the screen.\n- ESP to highlight players with customizable colors.\n- Options to adjust visualizer offsets and toggle features.\n- Save configurations between sessions.")

-- Aimbot Settings Tab
local aimbotTab = Window:MakeTab({
    Name = "Aimbot Settings",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

aimbotTab:AddBind({
    Name = "Toggle Aimbot",
    Default = Enum.KeyCode.Q,  -- Default key for toggling aimbot
    Hold = false,             -- The bind works on key press, not holding
    Flag = "aimbotToggle",
    Save = true,
    Callback = function()
        aimbotEnabled = not aimbotEnabled
        if aimbotEnabled then
            OrionLib:MakeNotification({
                Name = "Aimbot Enabled",
                Content = "Aimbot is now enabled.",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
        else
            OrionLib:MakeNotification({
                Name = "Aimbot Disabled",
                Content = "Aimbot is now disabled.",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
        end
    end    
})

aimbotTab:AddBind({
    Name = "Toggle Auto-Lock",
    Default = Enum.KeyCode.E,  -- Default key for toggling auto-lock
    Hold = false,             -- The bind works on key press, not holding
    Flag = "autoLockToggle",
    Save = true,
    Callback = function()
        if aimbotEnabled then
            autoLockEnabled = not autoLockEnabled
            OrionLib:MakeNotification({
                Name = "Auto-Lock " .. (autoLockEnabled and "Enabled" or "Disabled"),
                Content = "Auto-Lock is now " .. (autoLockEnabled and "enabled." or "disabled."),
                Image = "rbxassetid://4483345998",
                Time = 2
            })
        else
            OrionLib:MakeNotification({
                Name = "Aimbot Disabled",
                Content = "Aimbot must be enabled to use Auto-Lock.",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
        end
    end    
})

aimbotTab:AddSlider({
    Name = "Lock-On Radius",
    Min = 5,
    Max = 500,
    Default = lockOnRadius,
    Color = Color3.fromRGB(255, 0, 0),
    Increment = 1,
    Flag = "lockOnRadius",
    Save = true,
    Callback = function(value)
        lockOnRadius = value
    end
})

aimbotTab:AddSlider({
    Name = "FOV Angle",
    Min = 10,
    Max = 180,
    Default = fovAngle,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    Flag = "fovAngle",
    Save = true,
    Callback = function(value)
        fovAngle = value
        updateFOVVisualizer()
    end
})

-- Visualization Settings Tab
local visualizationTab = Window:MakeTab({
    Name = "Visual Settings",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

visualizationTab:AddToggle({
    Name = "Toggle FOV Visualizer",
    Default = visualizerEnabled,
    Flag = "visualizerEnabled",
    Save = true,
    Callback = function(value)
        visualizerEnabled = value
        updateFOVVisualizer()
    end
})

visualizationTab:AddSlider({
    Name = "Horizontal Offset",
    Min = -100,
    Max = 100,
    Default = horizontalOffset,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    Flag = "horizontalOffset",
    Save = true,
    Callback = function(value)
        horizontalOffset = value
        updateFOVVisualizer()
    end
})

visualizationTab:AddSlider({
    Name = "Vertical Offset",
    Min = -100,
    Max = 100,
    Default = verticalOffset,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    Flag = "verticalOffset",
    Save = true,
    Callback = function(value)
        verticalOffset = value
        updateFOVVisualizer()
    end
})

-- ESP Settings Tab
local espTab = Window:MakeTab({
    Name = "ESP Settings",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

espTab:AddToggle({
    Name = "Enable ESP",
    Default = espEnabled,
    Flag = "espToggle",
    Save = true,
    Callback = function(value)
        espEnabled = value
        updateESP()
    end
})

espTab:AddColorpicker({
    Name = "ESP Color",
    Default = espColor,
    Flag = "espColor",
    Save = true,
    Callback = function(value)
        espColor = value
        updateESP()
    end
})

espTab:AddLabel("Improvements coming soon...")

-- Destroy GUI Tab
local destroyTab = Window:MakeTab({
    Name = "Destroy GUI",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

destroyTab:AddButton({
    Name = "Destroy GUI",
    Callback = function()
        -- Destroy the OrionLib window
        OrionLib:Destroy()

        -- Ensure the FOV visualizer is destroyed
        if fovVisualizer then
            fovVisualizer:Destroy()
        end

        -- Remove all ESP highlights if ESP is disabled
        updateESP()

        OrionLib:MakeNotification({
            Name = "GUI Destroyed",
            Content = "The GUI has been destroyed.",
            Image = "rbxassetid://4483345998",
            Time = 2
        })
    end    
})

-- Update the aimbot, visualizer, and ESP on RenderStep
RunService.RenderStepped:Connect(function()
    updateAimbot()
    updateFOVVisualizer()
end)

-- Manual lock-on input handling
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.UserInputType == lockOnKey then
        lockOnHeld = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == lockOnKey then
        lockOnHeld = false
    end
end)

OrionLib:Init()
